{"version":3,"sources":["../../../src/Utils/Verify.ts"],"sourcesContent":["import { Request,Response,NextFunction } from \"express\";\r\nimport  jwt  from \"jsonwebtoken\";\r\nconst myKey = process.env.PRIVATEKEY||\"MySecret\"\r\nexport const VerifyJWT = (req:Request, res:Response, next:NextFunction) => {\r\n    const authHeader = req.headers.authorization;\r\n  \r\n    // Check if the Authorization header is missing\r\n    if (!authHeader) {\r\n      return res.status(401).json({ message: 'Missing or invalid token' });\r\n    }\r\n  \r\n    // Extract the token from the Authorization header\r\n    const token = authHeader.split(' ')[1];\r\n  \r\n    // Verify the token using the jsonwebtoken library\r\n    jwt.verify(token, myKey, (err, payload) => {\r\n      // If the token is invalid, return an error\r\n      if (err) {\r\n        return res.status(401).json({ message: 'Invalid token' });\r\n      }\r\n      // If the token is valid, add the user data to the request object\r\n      req.user = payload as CustomJwtPayLoad;\r\n      next();\r\n    });\r\n  };"],"names":["jwt","myKey","process","env","PRIVATEKEY","VerifyJWT","req","res","next","authHeader","headers","authorization","status","json","message","token","split","verify","err","payload","user"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AACA,OAAQA,SAAU,eAAe;AACjC,MAAMC,QAAQC,QAAQC,GAAG,CAACC,UAAU,IAAE;AACtC,OAAO,MAAMC,YAAY,CAACC,KAAaC,KAAcC;IACjD,MAAMC,aAAaH,IAAII,OAAO,CAACC,aAAa;IAE5C,+CAA+C;IAC/C,IAAI,CAACF,YAAY;QACf,OAAOF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA2B;IACpE;IAEA,kDAAkD;IAClD,MAAMC,QAAQN,WAAWO,KAAK,CAAC,IAAI,CAAC,EAAE;IAEtC,kDAAkD;IAClDhB,IAAIiB,MAAM,CAACF,OAAOd,OAAO,CAACiB,KAAKC;QAC7B,2CAA2C;QAC3C,IAAID,KAAK;YACP,OAAOX,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAgB;QACzD;QACA,iEAAiE;QACjER,IAAIc,IAAI,GAAGD;QACXX;IACF;AACF,EAAE"}