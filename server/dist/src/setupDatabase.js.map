{"version":3,"sources":["../../src/setupDatabase.ts"],"sourcesContent":["import { ResultSetHeader } from \"mysql2\";\r\nimport { PoolConnection } from \"mysql2/promise\";\r\nexport const setupDatabase =async (conn:PoolConnection)=>{\r\n    try {\r\n        await conn.query<ResultSetHeader>('CREATE DATABASE IF NOT EXISTS UserDB;');\r\n        conn.changeUser({ database: 'UserDB' }).catch(err => {\r\n            if (err) throw err;\r\n        });\r\n    }\r\n    catch (e) {\r\n        throw { \"error\": \"Couldn't Connect Create The inital Database\" }\r\n    }\r\n    try {\r\n        await conn.query<ResultSetHeader>(\r\n            `CREATE TABLE IF NOT EXISTS  text_table (\r\n            id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n            title VARCHAR(255) NOT NULL,\r\n            body TEXT NOT NULL,\r\n            user_id INT\r\n          );`\r\n        );\r\n    }\r\n    catch(e) {\r\n        console.error(e)\r\n        throw { \"error\": \"Couldn't Connect Create text_table\" }\r\n    }\r\n    try {\r\n        await conn.query<ResultSetHeader>(\r\n            `CREATE TABLE IF NOT EXISTS  user_table (\r\n             id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n            username VARCHAR(100) NOT NULL,\r\n            email VARCHAR(100) NOT NULL,\r\n            password VARCHAR(255)\r\n          );`\r\n        );\r\n    }\r\n    catch(err) {\r\n        throw { \"error\": \"Couldn't Connect Create user_table\" }\r\n    }\r\n    try {\r\n        const [res] = await conn.execute(`SELECT COUNT(*)\r\n                FROM information_schema.TABLE_CONSTRAINTS\r\n                WHERE CONSTRAINT_SCHEMA = DATABASE()\r\n                AND CONSTRAINT_NAME = 'fk_user_id'\r\n                AND CONSTRAINT_TYPE = 'FOREIGN KEY';`)\r\n        //@ts-expect-error\r\n        if (res[0][\"COUNT(*)\"] == 0) {\r\n            await conn.execute(`\r\n        ALTER TABLE text_table\r\n        ADD CONSTRAINT  fk_user_id\r\n        FOREIGN KEY (user_id)\r\n        REFERENCES user_table(id);`)\r\n        }\r\n    }\r\n    catch(e){\r\n        console.error(e)\r\n        throw {\"error\":\"couldn't Update Text_table\"}\r\n    }\r\n}"],"names":["setupDatabase","conn","query","changeUser","database","catch","err","e","console","error","res","execute"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAEA,OAAO,MAAMA,gBAAe,OAAOC;IAC/B,IAAI;QACA,MAAMA,KAAKC,KAAK,CAAkB;QAClCD,KAAKE,UAAU,CAAC;YAAEC,UAAU;QAAS,GAAGC,KAAK,CAACC,CAAAA;YAC1C,IAAIA,KAAK,MAAMA;QACnB;IACJ,EACA,OAAOC,GAAG;QACN,MAAM;YAAE,SAAS;QAA8C;IACnE;IACA,IAAI;QACA,MAAMN,KAAKC,KAAK,CACZ,CAAC;;;;;YAKD,CAAC;IAET,EACA,OAAMK,GAAG;QACLC,QAAQC,KAAK,CAACF;QACd,MAAM;YAAE,SAAS;QAAqC;IAC1D;IACA,IAAI;QACA,MAAMN,KAAKC,KAAK,CACZ,CAAC;;;;;YAKD,CAAC;IAET,EACA,OAAMI,KAAK;QACP,MAAM;YAAE,SAAS;QAAqC;IAC1D;IACA,IAAI;QACA,MAAM,CAACI,IAAI,GAAG,MAAMT,KAAKU,OAAO,CAAC,CAAC;;;;oDAIU,CAAC;QAC7C,kBAAkB;QAClB,IAAID,GAAG,CAAC,EAAE,CAAC,WAAW,IAAI,GAAG;YACzB,MAAMT,KAAKU,OAAO,CAAC,CAAC;;;;kCAIE,CAAC;QAC3B;IACJ,EACA,OAAMJ,GAAE;QACJC,QAAQC,KAAK,CAACF;QACd,MAAM;YAAC,SAAQ;QAA4B;IAC/C;AACJ,EAAC"}