{"version":3,"sources":["../../../src/routes/userRoutes.ts"],"sourcesContent":["import { Router } from \"express\";\r\nimport { Request,Response } from \"express\";\r\nimport { CountResult, LoginResault } from \"src/types\";\r\nimport jwt from \"jsonwebtoken\"\r\nimport {encryptPass,Matching} from \"./../Utils/encryptPass.js\"\r\n\r\n\r\nexport const UserRouter = Router()\r\nconst myKey = process.env.PRIVATEKEY||\"MySecret\";\r\n\r\nUserRouter.post('/register', async (req:Request, res:Response) => {\r\n  if(!req.conn){\r\n      res.status(500).send({\r\n        \"error\":\"Couldn't create Database\"\r\n      })\r\n      return;\r\n  }\r\n  try {\r\n    const { username, email, password } = req.body;\r\n    //checking the userName and Emaill Exist for duplicaiton\r\n    const [count] = await req.conn.query<CountResult[]>(\r\n      'SELECT COUNT(*) FROM user_table WHERE username = ? AND email= ?',\r\n      [username, email],\r\n    );\r\n    if (count[0][\"COUNT(*)\"]>0){\r\n      res.status(409).send(\r\n      {\r\n        error: {\"username\": \"Username already exists.\"}\r\n      })\r\n      req.conn.release()\r\n      return\r\n    }\r\n    const passHashed = await encryptPass(password)\r\n    //register the user \r\n    const sql = 'INSERT INTO user_table (`username`, `email`, `password`) VALUES (?, ?, ?);'\r\n    const values = [username,email,passHashed];\r\n    \r\n    const [resault,fields] = await req.conn.execute(sql,values)\r\n\r\n    req.conn.release()\r\n    //@ts-ignore\r\n    const Token = jwt.sign({username:username,passHashed:passHashed,id:resault.insertId},myKey)\r\n    res.json({ message: 'User registered',Token:Token});\r\n  } catch (error) {\r\n    console.error(error)\r\n    res.status(500).json({ message: 'Internal server error',error:error });\r\n  }\r\n});\r\n\r\n// Login endpoint\r\nUserRouter.post('/login', async (req, res) => {\r\n  if(!req.conn){\r\n      res.status(500).send({\r\n        error:\"Couldn't create Database\"\r\n      })\r\n      return;\r\n  }\r\n  try {\r\n    const {username, password } = req.body;\r\n    const [data, fields] = await req.conn.query<LoginResault[]>(\r\n      'select * from `user_table` where `username` = ? limit 1'\r\n      ,[username]\r\n    )\r\n    if (data.length === 0) {\r\n      req.conn.release()\r\n      return res.status(401).json({error: 'User Does not exist please Sign in ' });\r\n    }\r\n    const match = await Matching(password,data[0].password)\r\n    if (match){\r\n      const Token = jwt.sign({username:username,passHashed:password,id:data[0].id},myKey)\r\n      res.status(200).json({ message: 'Logged in', Token:Token });\r\n    }\r\n    else{\r\n      res.status(401).json({ error: 'Password is Incorrect' });\r\n    }\r\n  } catch (error) {\r\n    console.error(error)\r\n    res.status(500).json({ message: 'Internal server error',error:error });\r\n  }\r\n  finally{\r\n    req.conn.release()\r\n  }\r\n});"],"names":["Router","jwt","encryptPass","Matching","UserRouter","myKey","process","env","PRIVATEKEY","post","req","res","conn","status","send","username","email","password","body","count","query","error","release","passHashed","sql","values","resault","fields","execute","Token","sign","id","insertId","json","message","console","data","length","match"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}