{"version":3,"sources":["../../../src/routes/notesRoutes.ts"],"sourcesContent":["import { Router,Request } from \"express\";\r\nimport { CountResult } from \"src/types\";\r\nimport { findNullKeysRecursive } from \"src/Utils/checkForNull\";\r\n\r\nexport const NoteRoute = Router()\r\nconst myKey = process.env.PRIVATEKEY || \"MySecret\";\r\nNoteRoute.put('/:id', async (req, res) => {\r\n    if (!req.conn) {\r\n        res.status(500).send({\r\n            error: \"Couldn't create Database\"\r\n        })\r\n        return;\r\n    }\r\n    const { id } = req.params;\r\n    const userId = req.user!.id;\r\n    try {\r\n        const { title, body } = req.body;\r\n        const nullKeys: string[] = findNullKeysRecursive({ title: title, body: body })\r\n        if (nullKeys.length !== 0) {\r\n            res.status(400).json({ error: `${nullKeys} Can't be null` })\r\n            req.conn.release()\r\n            return;\r\n        }\r\n        const [data, fields] = await req.conn.execute(\r\n            'UPDATE text_table SET body = ? , title = ? where id= ? and user_id = ?  ;'\r\n            , [body,title,id,userId]\r\n        )\r\n        res.json({ message: 'Succesfull' });\r\n        req.conn.release()\r\n        return;\r\n    } catch (error) {\r\n        console.error(error)\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n    finally {\r\n        req.conn.release()\r\n    }\r\n});\r\nNoteRoute.delete('/:id', async (req, res) => {\r\n    if (!req.conn) {\r\n        res.status(500).send({\r\n            error: \"Couldn't create Database\"\r\n        })\r\n        return;\r\n    }\r\n    const { id } = req.params\r\n    const userId = req.user!.id;\r\n    try {\r\n        const [data, fields] = await req.conn.execute(\r\n            'DELETE from text_table where `title` = ? and `user_id` = ? ;'\r\n            , [id, userId]\r\n        )\r\n        res.json({ message: 'Succesfull' });\r\n        req.conn.release()\r\n        return;\r\n    } catch (error) {\r\n        console.error(error)\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    } finally {\r\n        req.conn.release()\r\n    }\r\n});\r\nNoteRoute.post('/', async (req, res) => {\r\n    if (!req.conn) {\r\n        res.status(500).send({\r\n            error: \"Couldn't create Database\"\r\n        })\r\n        return;\r\n    }\r\n    const id = req.user!.id;\r\n    try {\r\n        const { title, body } = req.body;\r\n\r\n        const nullKeys: string[] = findNullKeysRecursive({ id: id, body: body, title: title})\r\n\r\n        if (nullKeys.length !== 0) {\r\n            res.status(400).json({ error: `${nullKeys} Can't be null` })\r\n            req.conn.release()\r\n            return;\r\n        }\r\n        const [count] = await req.conn.execute<CountResult[]>(\r\n            'select COUNT(*) from text_table where  `user_id` = ? and `title` = ?  ;'\r\n            , [id, title]\r\n        )\r\n        if (count[0][\"COUNT(*)\"] > 0) {\r\n            res.status(409).send(\r\n                {\r\n                    \"status\": \"error\",\r\n                    \"code\": 409,\r\n                    \"message\": \"This username has Send the same Title.\",\r\n                })\r\n            req.conn.release()\r\n            return\r\n        }\r\n        const [data] = await req.conn.execute(\r\n            'INSERT INTO text_table(`title`, `body`,`user_id`) VALUES (?, ?,?);'\r\n            , [ title, body, id]\r\n        )\r\n        res.json({ message: 'Succesfull' });\r\n        req.conn.release()\r\n        return;\r\n    } catch (error) {\r\n        console.error(error)\r\n        res.status(400).json({ error: 'internal Server error' });\r\n    } finally {\r\n        req.conn.release()\r\n    }\r\n});\r\nNoteRoute.get('/', async (req, res) => {\r\n    if (!req.conn) {\r\n        res.status(500).send({\r\n            error: \"Couldn't create Database\"\r\n        })\r\n        return;\r\n    }\r\n    try {\r\n        const id = req.user;\r\n        const nullKeys: string[] = findNullKeysRecursive({ id: id })\r\n        if (nullKeys.length !== 0) {\r\n            res.status(400).json({ error: `${nullKeys} Can't be null` })\r\n            req.conn.release()\r\n            return;\r\n        }\r\n        const [data, fields] = await req.conn.execute(\r\n            'SELECT * FROM text_table WHERE `user_id` = ? ;'\r\n            , [id!.id]\r\n        )\r\n        res.json({ message: 'Succesfull', data: data });\r\n        req.conn.release()\r\n        return;\r\n    } catch (error) {\r\n        console.error(error)\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    } finally {\r\n        req.conn.release()\r\n    }\r\n});\r\nNoteRoute.get('/:id', async (req: Request, res) => {\r\n    if (!req.conn) {\r\n        res.status(500).send({\r\n            error: \"Couldn't create Database\"\r\n        })\r\n        return;\r\n    }\r\n    const { id } = req.params\r\n    const Userid = req.user;\r\n    try {\r\n        const nullKeys: string[] = findNullKeysRecursive({ id: id })\r\n        if (nullKeys.length !== 0) {\r\n            res.status(400).json({ message: `${nullKeys} Can't be null` })\r\n            req.conn.release()\r\n            return;\r\n        }\r\n        const [data, fields] = await req.conn.execute(\r\n            'SELECT * FROM text_table WHERE `user_id` = ? and `title` = ? ;'\r\n            , [Userid!.id, id]\r\n        )\r\n        res.json({ message: 'Succesfull', data: data });\r\n        req.conn.release()\r\n        return;\r\n    } catch (error) {\r\n        console.error(error)\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    } finally {\r\n        req.conn.release()\r\n    }\r\n});"],"names":["Router","findNullKeysRecursive","NoteRoute","myKey","process","env","PRIVATEKEY","put","req","res","conn","status","send","error","id","params","userId","user","title","body","nullKeys","length","json","release","data","fields","execute","message","console","delete","post","count","get","Userid"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}