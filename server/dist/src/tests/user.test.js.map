{"version":3,"sources":["../../../src/tests/user.test.ts"],"sourcesContent":["import {appTesting as app, appTesting} from '../Testsetup.js'; // Replace with the actual path to your Express app\r\n\r\ndescribe('User Routes', () => {\r\n  it('register a duplicated user', async () => {\r\n    const response = await app\r\n      .post('/user/register')\r\n      .send({\r\n        username: 'testuser',\r\n        email: 'test@example.com',\r\n        password: 'testpassword',\r\n      });\r\n\r\n    expect(response.status).toBe(409);\r\n    expect(response.body).toHaveProperty('error');\r\n  });\r\n\r\n  it('should log in an existing user', async () => {\r\n    const response = await app\r\n      .post('/user/login')\r\n      .send({\r\n        username: 'testuser',\r\n        password: 'testpassword',\r\n      });\r\n\r\n    expect(response.status).toBe(200);\r\n    expect(response.body).toHaveProperty('Token');\r\n  });\r\n\r\n  it('should return an error for non-existing user login', async () => {\r\n    const response = await app\r\n      .post('/user/login')\r\n      .send({\r\n        username: 'nonexistentuser',\r\n        password: 'wrongpassword',\r\n      });\r\n\r\n    expect(response.status).toBe(401);\r\n    expect(response.body).toHaveProperty('error');\r\n  });\r\n});\r\n"],"names":["appTesting","app","describe","it","response","post","send","username","email","password","expect","status","toBe","body","toHaveProperty"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,SAAQA,cAAcC,GAAG,QAAmB,kBAAkB,CAAC,mDAAmD;AAElHC,SAAS,eAAe;IACtBC,GAAG,8BAA8B;QAC/B,MAAMC,WAAW,MAAMH,IACpBI,IAAI,CAAC,kBACLC,IAAI,CAAC;YACJC,UAAU;YACVC,OAAO;YACPC,UAAU;QACZ;QAEFC,OAAON,SAASO,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAON,SAASS,IAAI,EAAEC,cAAc,CAAC;IACvC;IAEAX,GAAG,kCAAkC;QACnC,MAAMC,WAAW,MAAMH,IACpBI,IAAI,CAAC,eACLC,IAAI,CAAC;YACJC,UAAU;YACVE,UAAU;QACZ;QAEFC,OAAON,SAASO,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAON,SAASS,IAAI,EAAEC,cAAc,CAAC;IACvC;IAEAX,GAAG,sDAAsD;QACvD,MAAMC,WAAW,MAAMH,IACpBI,IAAI,CAAC,eACLC,IAAI,CAAC;YACJC,UAAU;YACVE,UAAU;QACZ;QAEFC,OAAON,SAASO,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAON,SAASS,IAAI,EAAEC,cAAc,CAAC;IACvC;AACF"}